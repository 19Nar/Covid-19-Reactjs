{"version":3,"sources":["Components/SecondPage/News/covid.jpeg","Components/Title/Title.js","Components/FirstPage/FirstPart/CardBlock/CardResults.js","Components/FirstPage/FirstPart/CardBlock/FetchCardResults.js","Components/FirstPage/FirstPart/CardBlock/CardBlock.js","Components/FirstPage/SecondPart/Map/Map.js","Components/FirstPage/ThirdPart/DailySummary/DailySummary.js","Components/FirstPage/ThirdPart/Recovered/Recovered.js","Components/FirstPage/ThirdPart/Confirmed/Confirmed.js","Components/FirstPage/ThirdPart/TotalDeaths/TotalDeaths.js","Components/FirstPage/ThirdPart/AllCases.js","Components/FirstPage/FirstPage.js","Components/SecondPage/News/News.js","Components/ThirdPage/Vaccination/Vaccination.js","Components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","useState","isOpen","setIsOpen","Navbar","fixed","className","light","expand","NavbarBrand","to","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","CardResults","FetchCardResults","cardresults","setCardResults","useEffect","fetch","then","response","json","data","console","log","map","cardresult","key","id","CardBlock","Col","xs","sm","md","lg","xl","Map","DailySummary","Recovered","Confirmed","TotalDeaths","AllCases","FirstPage","Container","Row","News","src","covid","alt","Vaccination","Footer","href","App","props","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ced28942.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid.96d9ca72.jpeg\";","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n} from \"reactstrap\";\r\n\r\nimport \"./Title.css\";\r\n\r\nconst Title = () => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <Navbar fixed=\"top\" className=\"nav\" light expand=\"md\">\r\n      <NavbarBrand>\r\n        <Link className={\"mx-3 link\"} to=\"/\">\r\n          N.V.M. Covid-19 Tracker\r\n        </Link>\r\n      </NavbarBrand>\r\n      <NavbarToggler onClick={toggle} />\r\n      <Collapse isOpen={isOpen} navbar>\r\n        <Nav className=\"ml-auto\" navbar>\r\n          <NavItem>\r\n            <Link className=\"link\" to=\"/news\">\r\n              News\r\n            </Link>\r\n          </NavItem>\r\n          <NavItem>\r\n            <Link className=\"link\" to=\"/vaccination\">\r\n              Vaccination\r\n            </Link>\r\n          </NavItem>\r\n        </Nav>\r\n      </Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React from 'react'\r\n\r\nconst CardResults = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardResults\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport CardResults from \"./CardResults\"\r\n\r\nconst FetchCardResults = () => {\r\n    const [cardresults, setCardResults] = useState([]);\r\n\r\n    useEffect(() => {\r\n      fetch(`https://corona.lmao.ninja/v2/countries`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          console.log(data);\r\n          setCardResults(data);\r\n        });\r\n    }, []);\r\n  \r\n    return (\r\n        <div> \r\n            {cardresults &&\r\n          cardresults.map((cardresult) => (\r\n            <CardResults cardresults={cardresult} key={cardresult.id} />\r\n          ))}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default FetchCardResults\r\n","import React from 'react';\r\nimport { Col } from \"reactstrap\";\r\n\r\nimport FetchCardResults from \"./FetchCardResults\";\r\n\r\nimport \"./CardBlock.css\"\r\n\r\nconst CardBlock = () =>  (\r\n        <Col className={\"Card\"} xs=\"12\" sm=\"12\" md=\"3\" lg=\"3\" xl=\"3\">\r\n        < FetchCardResults />\r\n      </Col>\r\n    )\r\n\r\nexport default CardBlock;","import React from 'react';\r\nimport { Col } from \"reactstrap\";\r\n\r\nimport \"./Map.css\"\r\n\r\nconst Map = () => (\r\n    \r\n        <Col className={\"Map\"} xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\" xl=\"6\">\r\n            Map\r\n        </Col>\r\n    )\r\n\r\nexport default Map;\r\n","import React from 'react';\r\n\r\nimport \"./DailySummary.css\";\r\n\r\nfunction DailySummary() {\r\n    return (\r\n        <div className={\"DailySummary\"}>\r\n            Daily\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DailySummary\r\n","import React from 'react';\r\n\r\nimport \"./Recovered.css\"\r\n\r\nfunction Recovered() {\r\n    return (\r\n        <div className={\"Recovered\"}>\r\n            Recovered\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recovered\r\n","import React from 'react';\r\n\r\nimport \"./Confirmed.css\"\r\n\r\nfunction Confirmed() {\r\n    return (\r\n        <div className={\"Confirmed\"}>\r\n            Confirmed\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Confirmed\r\n","import React from 'react';\r\n\r\nimport \"./TotalDeaths.css\";\r\n\r\nfunction TotalDeaths() {\r\n    return (\r\n        <div className={\"TotalDeaths\"}>\r\n          Total Deaths  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TotalDeaths\r\n","import React from \"react\";\r\nimport { Col } from \"reactstrap\";\r\n\r\nimport DailySummary from \"./DailySummary/DailySummary\";\r\nimport Recovered from \"./Recovered/Recovered\";\r\nimport Confirmed from \"./Confirmed/Confirmed\";\r\nimport TotalDeaths from \"./TotalDeaths/TotalDeaths\";\r\n\r\nconst  AllCases = () => (\r\n    <Col className={\"Cases\"}>\r\n      <Col>\r\n        <DailySummary />\r\n      </Col>\r\n      <Col>\r\n        <Confirmed />\r\n      </Col>\r\n      <Col>\r\n        <Recovered />\r\n      </Col>\r\n      <Col>\r\n        <TotalDeaths />\r\n      </Col>\r\n    </Col>\r\n  );\r\n\r\nexport default AllCases;\r\n","import React from \"react\";\r\nimport { Container, Row } from \"reactstrap\";\r\n\r\nimport CardBlock from \"./FirstPart/CardBlock/CardBlock\";\r\nimport Map from \"./SecondPart/Map/Map\";\r\nimport AllCases from \"./ThirdPart/AllCases\";\r\n\r\nimport \"./FirstPage.css\";\r\n\r\nconst FirstPage = () => (\r\n  <div>\r\n     <Container>\r\n      <Row className=\"FirstPage\">\r\n        <CardBlock />\r\n        <Map />\r\n        <AllCases />\r\n      </Row>\r\n    </Container>\r\n  </div>\r\n  );\r\n\r\nexport default FirstPage;\r\n","import React from \"react\";\r\nimport covid from \"./covid.jpeg\";\r\n\r\nimport \"./News.css\";\r\n\r\nconst News = () => {\r\n  return (\r\n    <div>\r\n      <hr></hr>\r\n      <hr></hr>\r\n      <img src={covid} alt=\"Covid\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default News;\r\n","import React from 'react';\r\n\r\nimport \"./Vaccination.css\"\r\n\r\nconst Vaccination = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Vaccination\r\n\r\n","import React from 'react';\r\n\r\nimport \"./Footer.css\"\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"foot\">\r\n        <span className=\"footer\">\r\n          <a href=\"/\">Â© N.V.M. Covid-19 Tracker, 2020</a>\r\n        </span>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Title from \"./Components/Title/Title\";\nimport FirstPage from \"./Components/FirstPage/FirstPage\";\nimport News from \"./Components/SecondPage/News/News\";\nimport Vaccination from \"./Components/ThirdPage/Vaccination/Vaccination\";\nimport Footer from \"./Components/Footer/Footer\";\n\nconst App = (props) => (\n  <Router>\n    <Title />\n    <Switch>\n      <Route exact path=\"/\">\n        <FirstPage />\n      </Route>\n      <Route path=\"/news\">\n        <News />\n      </Route>\n      <Route path=\"/vaccination\">\n        <Vaccination />\n      </Route>\n    </Switch>\n    <Footer />\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}